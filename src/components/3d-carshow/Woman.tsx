/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 woman.gltf -t 
*/
import * as THREE from 'three'
import React, { useEffect } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF, SkeletonUtils } from 'three-stdlib'
import { useCharacterAnimationsContext } from '@/context/CharacterAnimations';

type ActionName = 'GuitarPlaying' | 'Idle' | 'Running' | 'SalsaDancing' | 'TPose'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    Mesh019: THREE.SkinnedMesh
    Mesh019_1: THREE.SkinnedMesh
    Mesh019_2: THREE.SkinnedMesh
    Mesh019_3: THREE.SkinnedMesh
    Mesh019_4: THREE.SkinnedMesh
    Mesh019_5: THREE.SkinnedMesh
    Mesh019_6: THREE.SkinnedMesh
    Mesh019_7: THREE.SkinnedMesh
    Mesh019_8: THREE.SkinnedMesh
    Mesh019_9: THREE.SkinnedMesh
    mixamorigHips: THREE.Bone
  }
  materials: {
    Glasses: THREE.MeshStandardMaterial
    Eyes: THREE.MeshStandardMaterial
    Hair: THREE.MeshStandardMaterial
    Skin: THREE.MeshStandardMaterial
    Mouth: THREE.MeshStandardMaterial
    Shirt: THREE.MeshStandardMaterial
    Pants: THREE.MeshStandardMaterial
    Shoes: THREE.MeshStandardMaterial
    Sole: THREE.MeshStandardMaterial
    Laces: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export const  WomanModel = React.forwardRef<THREE.Group,JSX.IntrinsicElements['group'] >((props, ref ) => {
  const { scene, animations } = useGLTF('/models/woman.gltf')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as GLTFResult
  const { actions, names } = useAnimations(animations, ref as any)
  const {setAnimations, animationIndex} = useCharacterAnimationsContext()
  

  useEffect(() => {
    setAnimations(names)
  }, [names])
  

  useEffect(() => {
    actions[names[animationIndex]]?.reset().fadeIn(0.5).play()
    return () => {
      actions[names[animationIndex]]?.reset().fadeOut(0.5)
    }
  }, [animationIndex])
  return (
    <group ref={ref} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          <group name="SM_Chr_Developer_Female_02">
            <skinnedMesh castShadow name="Mesh019" geometry={nodes.Mesh019.geometry} material={materials.Glasses} skeleton={nodes.Mesh019.skeleton} />
            <skinnedMesh castShadow name="Mesh019_1" geometry={nodes.Mesh019_1.geometry} material={materials.Eyes} skeleton={nodes.Mesh019_1.skeleton} />
            <skinnedMesh castShadow name="Mesh019_2" geometry={nodes.Mesh019_2.geometry} material={materials.Hair} skeleton={nodes.Mesh019_2.skeleton} />
            <skinnedMesh castShadow name="Mesh019_3" geometry={nodes.Mesh019_3.geometry} material={materials.Skin} skeleton={nodes.Mesh019_3.skeleton} />
            <skinnedMesh castShadow name="Mesh019_4" geometry={nodes.Mesh019_4.geometry} material={materials.Mouth} skeleton={nodes.Mesh019_4.skeleton} />
            <skinnedMesh castShadow name="Mesh019_5" geometry={nodes.Mesh019_5.geometry} material={materials.Shirt} skeleton={nodes.Mesh019_5.skeleton} />
            <skinnedMesh castShadow name="Mesh019_6" geometry={nodes.Mesh019_6.geometry} material={materials.Pants} skeleton={nodes.Mesh019_6.skeleton} />
            <skinnedMesh castShadow name="Mesh019_7" geometry={nodes.Mesh019_7.geometry} material={materials.Shoes} skeleton={nodes.Mesh019_7.skeleton} />
            <skinnedMesh castShadow name="Mesh019_8" geometry={nodes.Mesh019_8.geometry} material={materials.Sole} skeleton={nodes.Mesh019_8.skeleton} />
            <skinnedMesh castShadow name="Mesh019_9" geometry={nodes.Mesh019_9.geometry} material={materials.Laces} skeleton={nodes.Mesh019_9.skeleton} />
          </group>
        </group>
      </group>
    </group>
  )
})


WomanModel.displayName = "WomanModel"
useGLTF.preload('/models/woman.gltf')
